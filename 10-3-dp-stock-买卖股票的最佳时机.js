/*
先说题目---------------------------------------------


给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
i是第i天
prices[i]是当天价格
我们返回的是第几天卖出能返回最大利润

你只能选择 某一天 买入这只股票，
并选择在未来的某一个不同的日子 卖出该股票。
设计一个算法来计算你所能获取的最大利润。


返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

示例 1：

输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，
最大利润 = 6-1 = 5 。
注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。


示例 2：
输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 没有交易完成, 所以最大利润为 0。


思路-----------------------------------------------------------------
1.暴力解法，找最优间距，容易超时
2.贪心，因为股票就买卖一次，那么贪心的想法很自然就是取左边最小值，右边最大值，然后得到的差值就是最大利润
*/

//双for循环暴力破解-----------------------------------
//双指针
var maxProfit = function(prices){
    var result  = 0;
    for(var i = 0; i< prices.length ; i++){
        //j从比i大一个值的地方开始循环
        for(var j = i+1;j<prices.length ; j++){
            result = Math.max(result,prices[j]-prices[i]);
        }
    }
    return result;
}
let result = maxProfit([7,1,5,3,6,4])
console.log("---",result);

//贪心--------------------------------------------------------
var  maxProfit2  = function(prices){
    var low = Infinity;//初始值为无穷大
    var result = 0;
    for(var i = 0; i<prices.length;i++){
        low = Math.min(low,prices[i]);//这个不是每次都换，相当于一个慢指针
        result = Math.max(result,prices[i]-low);
    }
    return result;
}
let result1 = maxProfit2([7,1,5,3,6,4]);
console.log("---",result1);


/*
动态规划的方法--------------------------------------------------------


1.确定dp数组以及其下标的含义--------------------------

dp[i][0]表示第i天持有股票多的最多现金
dp[i][1]表示第i天不持有股票所得最多现金

这里可能有同学疑惑，本题中只能买卖一次，持有股票之后哪还有现金呢？
其实一开始现金是0，那么加入第i天买入股票现金就是 -prices[i]， 这是一个负数。
注意这里说的是“持有”，“持有”不代表就是当天“买入”！也有可能是昨天就买入了，今天保持持有的状态
很多同学把“持有”和“买入”没分区分清楚。
在下面递推公式分析中，我会进一步讲解。


2.确定递推公式---------------------------------------
这里的思路是i是天数，j表示状态

(1)如果第i天持有股票即dp[i][0]， 那么可以由两个状态推出来：继续持有和当天买入

第i-1天就持有股票，那么就保持现状，所得现金就是昨天持有股票的所得现金 即：dp[i - 1][0]
第i天买入股票，所得现金就是买入今天的股票后所得现金即：-prices[i]

那么dp[i][0]应该选所得现金最大的，所以dp[i][0] = max(dp[i - 1][0], -prices[i]);

(2)如果第i天不持有股票即dp[i][1]， 也可以由两个状态推出来：继续不持有和当天卖出

第i-1天就不持有股票，那么就保持现状，所得现金就是昨天不持有股票的所得现金 即：dp[i - 1][1]
第i天卖出股票，所得现金就是按照今天股票佳价格卖出后所得现金即：prices[i] + dp[i - 1][0]

同样dp[i][1]取最大的，dp[i][1] = max(dp[i - 1][1], prices[i] + dp[i - 1][0]);

这样递推公式就分析完了

总结：
前者标注最小买入，后者标注对大卖出



3.dp数组如何初始化-----------------------------------

由递推公式 dp[i][0] = max(dp[i - 1][0], -prices[i]);
和 dp[i][1] = max(dp[i - 1][1], prices[i] + dp[i - 1][0]);可以看出

其基础都是要从dp[0][0]和dp[0][1]推导出来。

那么dp[0][0]表示第0天持有股票，此时的持有股票就一定是买入股票了，因为不可能有前一天推出来，所以dp[0][0] -= prices[0];

dp[0][1]表示第0天不持有股票，不持有股票那么现金就是0，所以dp[0][1] = 0;



4.确认遍历顺序--------------------------------------

从递推公式可以看出dp[i]都是有dp[i - 1]推导出来的，那么一定是从前向后遍历。

5.举例推导dp数组------------------------------------

分别去套用公式去计算dp[i][0]和dp[i][1]就可以了


*/

var maxProfit3 = function(prices){
    //我们来看python的版本一，毕竟python作为脚本语言整体和js最为相近
    let len = prices.length;
    if(len == 0) return 0;
    //初始化数组，先都放0，这里就用到js创建二维数组的内容了    	
	//js创建二维数组,分几行，以及每行内容
	let dp = Array.from({length: len}).map(
		//每行情况
		() => Array(2).fill(0)
	);
    dp[0][0] = -prices[0];
    dp[0][1] = 0;
    //然后我们继续往下走
    for(var i =1; i<len;i++){
        dp[i][0] = Math.max(dp[i-1][0],-prices[i]);
        dp[i][1] = Math.max(dp[i-1][1],prices[i]+dp[i-1][0]);
    }
    return dp[len-1][1];
}
let result3 =  maxProfit3([7,1,5,3,6,4])
console.log("--",result3);