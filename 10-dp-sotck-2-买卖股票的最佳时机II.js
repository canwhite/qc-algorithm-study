/*

题目---------------------------------------------------------------------
题目链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/

给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。

示例 2:
输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

示例 3:
输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

提示：

1 <= prices.length <= 3 * 10 ^ 4
0 <= prices[i] <= 10 ^ 4

区别：

这道题和之前的区别在于，你可以多次买入和卖出，
（注意只有一只股票，所以再次购买前要出售掉之前的股票

动态五部曲-----------------------------------------------------------

在动态五部曲中，这个区别主要体现在递推公式上，其他都和上一节是一样的
所以这里重点讲一下递推公式：

这里重申一下dp数组的含义：

dp[i][0] 表示第i天持有股票所得现金。
dp[i][1] 表示第i天不持有股票所得最多现金

如果第i天持有股票即dp[i][0]， 那么可以由两个状态推出来----------

（1）第i-1天就持有股票，那么就保持现状，所得现金就是昨天持有股票的所得现金 即：dp[i - 1][0]
（2）第i天买入股票，所得现金就是昨天不持有股票的所得现金减去 今天的股票价格 即：dp[i - 1][1] - prices[i]
区别--
在上一节因为股票全程只能买卖一次，所以如果买入股票，
那么第i天持有股票即dp[i][0]一定就是 -prices[i]。
而本题，因为一只股票可以买卖多次，所以当第i天买入股票的时候，所持有的现金可能有之前买卖过的利润。

那么第i天持有股票即dp[i][0]，如果是第i天买入股票，
所得现金就是昨天不持有股票的所得现金 减去 今天的股票价格 即：dp[i - 1][1] - prices[i]。

第i天不持有股票即dp[i][1]的情况， 依然可以由两个状态推出来---------

第i-1天就不持有股票，那么就保持现状，所得现金就是昨天不持有股票的所得现金 即：dp[i - 1][1]
第i天卖出股票，所得现金就是按照今天股票佳价格卖出后所得现金即：prices[i] + dp[i - 1][0]
注意这里和上一节买卖股票的最佳时机就是一样的逻辑，卖出股票收获利润（可能是负值）天经地义！
*/

const maxProfit = (prices)=>{

    //初始化数组,这种写起来更舒服呀
    let dp = Array.from(Array(prices.length),()=>Array(2).fill(0));
    dp[0][0] = 0- prices[0];
    dp[0][1] = 0;

    for(let i =1;i<prices.length;i++){
         // 如果第i天持有股票即dp[i][0]， 那么可以由两个状态推出来
        dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1]-prices[i]);//斜对角dp[i-1][1]-prices[i]
        // dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] + prices[i]);
        dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] + prices[i]);

    }
    return dp[prices.length-1][1]

}
let result3 =  maxProfit([7,1,5,3,6,4])
console.log("--",result3);