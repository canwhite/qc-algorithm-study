/*-------------------------------------------------------
回溯算法
回溯法也可以叫做回溯搜索法，它是一种搜索的方式
回溯是递归的副产品，只要有递归就有回溯
所以以下讲解中，回溯函数指的也就是递归函数，指的是一个函数
--------------------------------------
回溯法的效率：
虽然回溯法很难，很不好理解，但是回溯法并不是什么高效的算法
因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案
如果想要回溯高效一些，可以加一些剪枝的操作，但是改不了回溯穷举的本质
那么既然回溯法并不高效为什么还要用它呢？
因为没得选，一些问题能暴力搜出来就不错了，
撑死了就剪一下枝，还没有更高效的写法
因此大家可能好奇了？
都什么问题，这么牛b，需要暴力搜索
--------------------------------------
回溯法解决的问题：
一般都是寻求子集的问题，因为这类问题需要穷举
可以大致分成以下几种：
* 组合问题 ： N个数里边按照一定的规则找出k个数的集合
* 切割问题 ： 一个字符串按照一定规则，有几种切割方法
* 子集问题 ： 一个N个数的集合里有火烧符合条件的子集
* 排列问题 :  N个数按一定规则全排列，有几种排列方式
* 棋盘问题 ： N皇后，解数独等等

这里说一下组合和排列的区别：
组合无序，排列有序
---------------------------------------
如何理解回溯法：
回溯法解决的问题都可以抽象为树形结构
因为回溯法解决的都是在集合中查找自己
集合的大小构成了树的宽度，递归的深度，构成了树的深度
递归就要有终止条件，
所以必然是一个高度有限的树(N叉树)
--------------------------------------
回溯模板：
void backtracking(参数) {
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理结果
    }
}

---------------------------------------------------*/