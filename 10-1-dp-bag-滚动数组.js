/* 
今天我们就来说一说滚动数组，
其实在前面的题目中我们已经用到过滚动数组了，
就是把二维dp降为一维dp，

那么我们通过01背包，来彻底讲一讲滚动数组！

接下来还是用如下这个例子来进行讲解

背包最大重量为4。

物品为：

重量	价值
物品0	1	15
物品1	3	20
物品2	4	30
问背包能背的物品最大价值是多少？ 
-----------------------------------------
一维dp数组(滚动数组)
滚动数组的由来，需要满足的条件是上一层可以重复利用，直接拷贝到当前层

其实可以发现如果把dp[i - 1]那一层拷贝到dp[i]上，
表达式完全可以是：dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i]);

再想与其把dp[i - 1]这一层拷贝到dp[i]上，不如只用一个一维数组了，
只用dp[j]（一维数组，也可以理解是一个滚动数组）

dp[i][j]里的i和j表达的是什么了，i是物品，j是背包容量。

dp[i][j] 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少。
一定要时刻记住这里i和j的含义，要不然很容易看懵了。

------------------------------------------
动态分析五部曲：
------------------------------------------
1.确定dp数组的定义
在一维dp数组中，
dp[j]表示：容量为j的背包，所背的物品价值最大为dp[j]


------------------------------------------
2.一维dp数组的递推公式
dp[j]为 容量为j的背包所背的最大价值，那么如何推导dp[j]呢？

dp[j]可以通过dp[j - weight[i]]推导出来，
dp[j - weight[i]]表示容量为j - weight[i]的背包所背的最大价值。

dp[j - weight[i]] + value[i] 表示容量为 j - 物品i重量的
背包加上物品i的价值。
（也就是容量为j的背包，放入物品i了之后的价值即：dp[j]）

此时dp[j]有两个选择，一个是取自己dp[j]，
一个是取dp[j - weight[i]] + value[i]，
指定是取最大的，毕竟是求最大价值，

所以递推公式为：
dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);

-------------------------------------------
3.一维dp数组如何初始化





*/